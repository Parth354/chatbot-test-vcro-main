-- Migration to create the user_performance table to store persona data.

-- Create the user_performance table
CREATE TABLE IF NOT EXISTS public.user_performance (
    id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.profiles(user_id) ON DELETE CASCADE,
    linkedin_url TEXT UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT timezone('utc'::text, now()),
    raw_scraped_data JSONB,
    enriched_data JSONB
);

-- Add an index on user_id for faster lookups
CREATE INDEX IF NOT EXISTS user_performance_user_id_idx ON public.user_performance (user_id);

-- Add comments to describe the table and its columns for clarity
COMMENT ON TABLE public.user_performance IS 'Stores persona data generated from LinkedIn profiles, including raw scraped data and the final enriched persona from AI.';
COMMENT ON COLUMN public.user_performance.id IS 'Unique identifier for each performance record.';
COMMENT ON COLUMN public.user_performance.user_id IS 'Foreign key referencing the user in the profiles table.';
COMMENT ON COLUMN public.user_performance.linkedin_url IS 'The unique LinkedIn profile URL used as an identifier for the scraped data.';
COMMENT ON COLUMN public.user_performance.created_at IS 'Timestamp of when the record was created.';
COMMENT ON COLUMN public.user_performance.raw_scraped_data IS 'The full JSON response from the scraping service (e.g., Browserflow).';
COMMENT ON COLUMN public.user_performance.enriched_data IS 'The structured JSON persona generated by the OpenAI API.';

-- Disable Row Level Security (RLS) for this table as requested.
-- This table will be accessed by backend services (like Edge Functions) and not directly by end-users.
ALTER TABLE public.user_performance DISABLE ROW LEVEL SECURITY;
